name: "SNAPSHOT : Docker Image Build & Deploy on GKE"

on:
  workflow_call:
    inputs:
      APPLICATION_NAME:
        description: 'application name'
        required: true
        type: string
      IMAGE_TAG:
        description: 'Tag of the Docker Image to be deployed'
        required: false
        type: string
      POM_VERSION:
        description: 'version of POM'
        required: true
        type: string
      ARTIFACTORY_URL:
        description: 'Artifactory url'
        required: true
        type: string
      ARTIFACTORY_NAMESPACE:
        description: 'Artifactory url'
        required: true
        type: string
      PROJECT_ID:
        description: 'Project name'
        required: true
        type: string
      GKE_REGION:
        description: 'GKE Region'
        required: true
        type: string
      GKE_CLUSTER:
        description: 'GKE Cluster name'
        required: true
        type: string
      GKE_NAMESPACE:
        description: 'GKE namespace'
        required: true
        type: string

env:
  BUILD_TYPE: "SNAPSHOT"
  ARTIFACTORY_URL: ${{ inputs.ARTIFACTORY_URL }}
  APPLICATION_NAME: ${{ inputs.APPLICATION_NAME }}
  ARTIFACTORY_NAMESPACE: ${{ inputs.ARTIFACTORY_NAMESPACE }}
  PROJECT_ID: ${{ inputs.PROJECT_ID }}
  GKE_REGION: ${{ inputs.GKE_REGION }}
  GKE_CLUSTER: ${{ inputs.GKE_CLUSTER }}
  GKE_NAMESPACE: ${{ inputs.GKE_NAMESPACE }}
  IMG_TAG: ${{ inputs.IMAGE_TAG }}
  TARGET_ENV: "dev"
  HELM_ARTIFACTS: "onlineliquorservices_bucket/ecom_helm/dev/ecom_helm.zip"
  ZIP_FILE_NAME: ecom_helm.zip
  APP_VERSION: ${{ inputs.POM_VERSION }}

permissions:
  id-token: write
  contents: write

jobs:
  build-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      IMAGE_NAME: ${{ env.APPLICATION_NAME }}
      VERSION: ${{ env.POM_VERSION }}
      JAR_LOCATION: ${{ env.JAR_LOCATION }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.CI_CD_SA_SECRET }} # This SA Secret will auth GCP and download artifacts

      - name: Common setup for Configuring Artifactory
        uses: Prabal-saxena/common-ci-cd-workflows/.github/actions/common@feature/helm_pkg_repo_deploy_gke

      - name: Common Setup for installing maven, JDK & App Version
        uses: Prabal-saxena/common-ci-cd-workflows/.github/actions/install-maven@feature/helm_pkg_repo_deploy_gke

      - name: Deploy with Maven
        uses: Prabal-saxena/common-ci-cd-workflows/.github/actions/maven-build@feature/helm_pkg_repo_deploy_gke
        with:
          COMMAND: clean install --file pom.xml -s setting.xml -Djib.allowInsecureRegistries=true -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -DskipTests

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APPLICATION_NAME  }}
          path: ./target/${{ env.APPLICATION_NAME }}-${{ env.POM_VERSION }}.jar

      - name: Check built JAR
        run: ls -lh target/

      - name: Docker Build
        uses: Prabal-saxena/common-ci-cd-workflows/.github/actions/docker-build@feature/helm_pkg_repo_deploy_gke
        with:
          IMG_NAME: ${APPLICATION_NAME}
          IMG_TAG: ${IMG_TAG}
          ARTIFACTORY_URL: ${{ env.ARTIFACTORY_URL }}
          ARTIFACTORY_NAMESPACE: ${{ env.ARTIFACTORY_NAMESPACE }}
          BUILD_TYPE: ${{ env.BUILD_TYPE }}

  helm-package-on-artifactory:
    runs-on: ubuntu-latest
    name: Build & Publish Helm Package
    needs:
      - build-docker-image
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.CI_CD_SA_SECRET }}

      - name: Common setup for Configuring Artifactory
        uses: Prabal-saxena/common-ci-cd-workflows/.github/actions/common@feature/helm_pkg_repo_deploy_gke

      - name: Get Cluster Details
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_REGION }}
          project_id:  ${{ env.PROJECT_ID }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Download the Helm artifact
        run: |
          echo "gs://${HELM_ARTIFACTS}"
          gsutil cp gs://${HELM_ARTIFACTS} .

      - name: Unzip Helm Chart
        shell: bash
        run: |
          unzip -o ${ZIP_FILE_NAME} -d extracted_chart
          ls -al

      - name: Update Helm Chart
        shell: bash
        run: |
          cp ./helm/dev/values.yaml extracted_chart/helm/values.yaml
          echo "Replaced values.yaml:"
          cat extracted_chart/helm/values.yaml
          VALUE_FILE="extracted_chart/helm/values.yaml"
          yq -i ".image.tag = \"$IMG_TAG\"" "$VALUE_FILE"
          cat extracted_chart/helm/values.yaml
          
          echo "Updating app version in Chart.yaml file"
          CHART_FILE="extracted_chart/helm/Chart.yaml"
          sed -i "s/^version: .*/version: ${APP_VERSION}/" "$CHART_FILE"
          sed -i "s/^appVersion: .*/appVersion: \"${APP_VERSION}\"/" "$CHART_FILE"
          echo "Updated Chart.yaml"
          cat "$CHART_FILE"

      - name: Setup Environment Configuration
        shell: bash
        run: |
          echo "Copy application properties from scr folder"
          cp -r ./src/main/resources extracted_chart/helm
          cp -r ./helm/dev/values.yaml extracted_chart/helm/dev
          cp -r ./helm/external-secret.yaml extracted_chart/helm/dev
          ls -al

      - name: Helm package
        shell: bash
        run: |
          ls -al
          echo "-------------------Run helm package command--------------------"
          echo "Version : ${{ needs.build-docker-image.outputs.VERSION }}"
          helm package extracted_chart/helm --version ${{ needs.build-docker-image.outputs.VERSION }} --app-version ${{ needs.build-docker-image.outputs.VERSION }}
          ls -al

      - name: Upload Helm Package
        uses: actions/upload-artifact@v4
        with:
          name: helm_package
          path: ecom_helm-${{ needs.build-docker-image.outputs.VERSION }}.tgz

  deploy-image-on-gke:
    runs-on: ubuntu-latest
    name: Deploy to GKE
    needs:
      - helm-package-on-artifactory
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.CI_CD_SA_SECRET }}

      - name: Common setup for Configuring Artifactory
        uses: Prabal-saxena/common-ci-cd-workflows/.github/actions/common@feature/helm_pkg_repo_deploy_gke

      - name: Download Helm Package
        uses: actions/download-artifact@v4
        with:
          name: helm_package

      - name: List Directories
        shell: bash
        run: |
          echo "------------------ Run ls command to print all directories and files ------------------"
          ls -al
          echo "------------------ Unzip the tgz file-------------------"
          tar -xvf ecom_helm-*.tgz
          mv ecom_helm ${{ env.APPLICATION_NAME }}-helm
          ls -al

      - name: Deploy With Helm
        uses: Prabal-saxena/common-ci-cd-workflows/.github/actions/gke-deploy@feature/helm_pkg_repo_deploy_gke
        with:
          ARTIFACTORY_URL: ${{ env.ARTIFACTORY_URL }}
          ARTIFACTORY_NAMESPACE: ${{ env.ARTIFACTORY_NAMESPACE }}
          RELEASE: ${{ env.APPLICATION_NAME }}
          IMG_NAME: ${{ env.APPLICATION_NAME }}
          IMG_TAG: ${{ env.IMG_TAG }}
          GKE_NAMESPACE: ${{ env.ARTIFACTORY_NAMESPACE }}
          HELM_BIN: "helm"
          IMG_URL: ${{ env.IMG_URL }}


