name: "SNAPSHOT : Docker Image Build & Deploy on GKE"

on:
  workflow_call:
    inputs:
      APPLICATION_NAME:
        description: 'application name'
        required: true
        type: string
      IMAGE_TAG:
        description: 'Tag of the Docker Image to be deployed'
        required: true
        type: string
      POM_VERSION:
        description: 'version of POM'
        required: true
        type: string
      ARTIFACTORY_URL:
        description: 'Artifactory url'
        required: true
        type: string
      ARTIFACTORY_NAMESPACE:
        description: 'Artifactory url'
        required: true
        type: string
      PROJECT_ID:
        description: 'Project name'
        required: true
        type: string
      GKE_REGION:
        description: 'GKE Region'
        required: true
        type: string
      GKE_CLUSTER:
        description: 'GKE Cluster name'
        required: true
        type: string
      GKE_NAMESPACE:
        description: 'GKE namespace'
        required: true
        type: string

env:
  BUILD_TYPE: "SNAPSHOT"
  ARTIFACTORY_URL: ${{ inputs.ARTIFACTORY_URL }}
  APPLICATION_NAME: ${{ inputs.APPLICATION_NAME }}
  ARTIFACTORY_NAMESPACE: ${{ inputs.ARTIFACTORY_NAMESPACE }}
  PROJECT_ID: ${{ inputs.PROJECT_ID }}
  GKE_REGION: ${{ inputs.GKE_REGION }}
  GKE_CLUSTER: ${{ inputs.GKE_CLUSTER }}
  GKE_NAMESPACE: ${{ inputs.GKE_NAMESPACE }}
  IMAGE_VERSION_TAG: ${{ inputs.IMAGE_TAG }}
  TARGET_ENV: "dev"
  HELM_ARTIFACTS: "onlineliquorservices_bucket/ecom_helm/dev/ecom_helm.zip"
  ZIP_FILE_NAME: ecom_helm.zip
  APP_VERSION: ${{ inputs.POM_VERSION }}

permissions:
  id-token: write
  contents: write

jobs:
  build-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      IMAGE_NAME: ${{ env.APPLICATION_NAME }}
      VERSION: ${{ env.POM_VERSION }}
      JAR_LOCATION: ${{ env.JAR_LOCATION }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.CI_CD_SA_SECRET }} # This SA Secret will auth GCP and download artifacts

      - name: Common setup for Configuring Artifactory
        uses: Prabal-saxena/common-ci-cd-workflows/.github/actions/common@feature/build-deploy-snapshot

      - name: Common Setup for installing maven, JDK & App Version
        uses: Prabal-saxena/common-ci-cd-workflows/.github/actions/install-maven@feature/build-deploy-snapshot

      - name: Deploy with Maven
        uses: Prabal-saxena/common-ci-cd-workflows/.github/actions/maven-build@feature/build-deploy-snapshot
        with:
          COMMAND: clean install --file pom.xml -s setting.xml -Djib.allowInsecureRegistries=true -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -DskipTests

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APPLICATION_NAME  }}
          path: ./target/${{ env.APPLICATION_NAME }}-${{ env.POM_VERSION }}.jar

      - name: Check built JAR
        run: ls -lh target/

      - name: Docker Build
        uses: Prabal-saxena/common-ci-cd-workflows/.github/actions/docker-build@feature/build-deploy-snapshot
        with:
          IMG_NAME: ${APPLICATION_NAME}
          IMG_TAG: ${POM_VERSION}
          ARTIFACTORY_URL: ${{ env.ARTIFACTORY_URL }}
          ARTIFACTORY_NAMESPACE: ${{ env.ARTIFACTORY_NAMESPACE }}
          BUILD_TYPE: ${{ env.BUILD_TYPE }}

  hrlm-package-on-artifactory:
    name: Build & Publish Helm Package
    needs:
      - build-docker-image
    steps:
      - name: Checkout Repository
        uses: actions/chechout@v3

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.CI_CD_SA_SECRET }}

      - name: Common setup for Configuring Artifactory
        uses: Prabal-saxena/common-ci-cd-workflows/.github/actions/common@feature/build-deploy-snapshot

      - name: Get Cluster Details
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_REGION }}
          project_id:  ${{ env.PROJECT_ID }}

      - name: Download the Helm artifact
        run: |
          gsutil cp ecom_helm.zip gs://${HELM_ARTIFACTS}

      - name: Unzip Helm Chart
        shell: bash
        run: |
          unzip -o ${ZIP_FILE_NAME} -d extracted_chart
          ls -al

      - name: Update Helm Chart
        shell: bash
        run: |
          cp ./helm/dev/values.yaml extracted_chart/helm/values.yaml
          echo "Replaced values.yaml:"
          cat extracted_chart/helm/values.yaml
          echo "Updating app version in Chart.yaml file"
          CHART_FILE="extracted_chart/helm/Chart.yaml"
          sed -i "s/^version: .*/version: ${APP_VERSION}/" "$CHART_FILE"
          sed -i "s/^appVersion: .*/appVersion: \"${APP_VERSION}\"/" "$CHART_FILE"
          echo "Updated Chart.yaml"
          cat "$CHART_FILE"
          
