name: 'GKE Deploy'
description: 'GKE Deploy'
inputs:
  IMG_NAME:
    description: image name
    required: true
  IMG_TAG:
    description: image tag
    required: true
  ARTIFACTORY_URL:
    description: Artifactory url
    required: true
    default: ${ARTIFACTORY_URL}
  ARTIFACTORY_NAMESPACE:
    description: image namespace
    required: true
    default: ${ARTIFACTORY_NAMESPACE}
  RELEASE:
    description: Helm release
    required: true
  GKE_NAMESPACE:
    description: gke namespace
    required: true
  HELM_BIN:
    required: true
    description: Path to helm binary
  IMG_URL:
    required: true
    description: Whole Image URL with TAG

runs:
  using: composite
  steps:
    - name: Create namespace if it doesn't exist
      shell: bash
      run: |
        kubectl get namespace ${{ inputs.GKE_NAMESPACE }} >/dev/null 2>&1 || \
          kubectl create namespace ${{ inputs.GKE_NAMESPACE }}
    - name: Wait for CRD Schema Registration (10s)
      shell: bash
      run: |
        CRD_ES="externalsecrets.external-secrets.io"
        CRD_CSS="clustersecretstores.external-secrets.io"
        TIMEOUT="60" # Max 60 seconds for the entire polling loop
        RETRY_INTERVAL="5" # Check every 5 seconds
        
        # --- Stage 1: Wait for CRD Condition Established (Server-Side) ---
        echo "Waiting for CRD conditions to be established (Server-Side check)..."
        kubectl wait --for=condition=Established --timeout=10s crd/${CRD_ES}
        kubectl wait --for=condition=Established --timeout=10s crd/${CRD_CSS}
        
        # --- Stage 2: Poll until CRD is visible to client (Client-Side Cache Check) ---
        
        wait_for_crd_discovery() {
            local crd_name=$1
            echo "Polling for client discovery of ${crd_name} for up to ${TIMEOUT}s..."
        
            for i in $(seq 1 $(($TIMEOUT / $RETRY_INTERVAL))); do
                # kubectl get crd checks the client's API discovery and forces a refresh
                kubectl get crd ${crd_name} -o name 2>/dev/null
                if [ $? -eq 0 ]; then
                    echo "Success: CRD ${crd_name} is fully discoverable by the client."
                    return 0
                fi
                echo "Still waiting for ${crd_name} to be fully discoverable... sleeping ${RETRY_INTERVAL}s."
                sleep ${RETRY_INTERVAL}
            done
        
            echo "Error: CRD ${crd_name} was not discovered within ${TIMEOUT} seconds."
            return 1
        }
        
        wait_for_crd_discovery ${CRD_ES}
        wait_for_crd_discovery ${CRD_CSS}

    - name: Deploy via helm
      shell: bash
      run: |
        CHART_PATH=./${{ env.APPLICATION_NAME }}-helm
        "${{ inputs.HELM_BIN}}" upgrade \
            --install -f ${{ env.APPLICATION_NAME }}-helm/values.yaml ${{ inputs.RELEASE }} $CHART_PATH \
            --set namespace=${{ inputs.GKE_NAMESPACE }} \
            --set env="dev"

    - name: Verify Deployment
      id: verify
      shell: bash
      run: |
        kubectl get all -n ${{ inputs.GKE_NAMESPACE }}
        kubectl cluster-info
        sleep 10
        echo "View Pods in namespace ${{ inputs.GKE_NAMESPACE }}"
        kubectl get pods -n ${{ inputs.GKE_NAMESPACE }}