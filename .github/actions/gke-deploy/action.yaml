name: 'GKE Deploy'
description: 'GKE Deploy'
inputs:
  IMG_NAME:
    description: image name
    required: true
  IMG_TAG:
    description: image tag
    required: true
  ARTIFACTORY_URL:
    description: Artifactory url
    required: true
    default: ${ARTIFACTORY_URL}
  ARTIFACTORY_NAMESPACE:
    description: image namespace
    required: true
    default: ${ARTIFACTORY_NAMESPACE}
  RELEASE:
    description: Helm release
    required: true
  GKE_NAMESPACE:
    description: gke namespace
    required: true
  HELM_BIN:
    required: true
    description: Path to helm binary
  IMG_URL:
    required: true
    description: Whole Image URL with TAG

runs:
  using: composite
  steps:
    - name: Create namespace if it doesn't exist
      shell: bash
      run: |
        kubectl get namespace ${{ inputs.GKE_NAMESPACE }} >/dev/null 2>&1 || \
          kubectl create namespace ${{ inputs.GKE_NAMESPACE }}
    - name: Wait for CRD Schema Registration (10s)
      shell: bash
      run: |
        echo "Waiting up to 10s for the ExternalSecret CRD to be established..."
        # Note: 'externalsecrets.external-secrets.io' is the fully qualified name for the CRD.
        kubectl wait --for=condition=Established --timeout=10s crd/externalsecrets.external-secrets.io
        if [ $? -ne 0 ]; then
            echo "Warning: ExternalSecret CRD was not fully established after 10 seconds. Proceeding anyway."
        fi

    - name: Deploy via helm
      shell: bash
      run: |
        CHART_PATH=./${{ env.APPLICATION_NAME }}-helm
        "${{ inputs.HELM_BIN}}" upgrade \
            --install -f ${{ env.APPLICATION_NAME }}-helm/values.yaml ${{ inputs.RELEASE }} $CHART_PATH \
            --set namespace=${{ inputs.GKE_NAMESPACE }}
            --dry-run --debug
            --set env="dev"
            --wait \
            --timeout 10m

    - name: Verify Deployment
      id: verify
      shell: bash
      run: |
        kubectl get all -n ${{ inputs.GKE_NAMESPACE }}
        kubectl cluster-info
        sleep 10
        echo "View Pods in namespace ${{ inputs.GKE_NAMESPACE }}"
        kubectl get pods -n ${{ inputs.GKE_NAMESPACE }}